{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","components/HeaderComp.js","components/BalanceComp.js","components/AccountSummary.js","components/Transaction.js","components/TransactionHistory.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","transactions","filter","trasanction","id","payload","initialState","description","transactionAmount","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","Provider","value","Header","Balance","AccountSummary","className","Transaction","transaction","TransactionHistory","useContext","map","AddTransaction","useState","text","setText","amount","setAmount","addTransaction","onSubmit","e","preventDefault","newTransaction","Math","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAEe,WAACA,EAAOC,GACnB,OAAOA,EAAOC,MAEV,IAAK,qBACD,OAAO,eACAF,EADP,CAEIG,aAAcH,EAAMG,aAAaC,QAAO,SAAAC,GAAW,OAAIA,EAAYC,KAAOL,EAAOM,aAEzF,IAAK,kBACD,OAAO,eACAP,EADP,CAEIG,aAAa,CAAEF,EAAOM,SAAV,mBAAsBP,EAAMG,iBAEhD,QACI,OAAOH,ICVbQ,EAAe,CACjBL,aAAc,CACV,CAACG,GAAI,EAAGG,YAAa,WAAYC,kBAAmB,KACpD,CAACJ,GAAI,EAAGG,YAAa,YAAaC,mBAAoB,KACtD,CAACJ,GAAI,EAAGG,YAAa,WAAYC,kBAAmB,KACpD,CAACJ,GAAI,EAAGG,YAAa,YAAaC,mBAAoB,OAKjDC,EAAgBC,wBAAcJ,GAG9BK,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAE5BC,qBAAWC,EAAYR,GAAhCR,EAFqC,oBAI5C,OACI,kBAACW,EAAcM,SAAf,CAAwBC,MACpB,CACIf,aAAcH,EAAMG,eAGvBW,ICzBAK,EAAS,WAClB,OACI,0ECJKC,EAAU,WACnB,OACI,oCACG,6CACA,uCCJEC,EAAiB,WAC1B,OACI,yBAAKC,UAAU,qBACX,6BACE,sCACR,uBAAGA,UAAU,cAAb,UAEM,6BACE,uCACR,uBAAGA,UAAU,eAAb,YCTOC,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAC1B,OACI,wBAAIF,UAAU,QACTE,EAAYf,YACb,8BAAOe,EAAYd,mBACnB,4BAAQY,UAAU,cAAlB,OCHCG,EAAqB,WAAM,IAG/BtB,EAAgBuB,qBAAWf,GAA3BR,aAEP,OACK,oCACC,uCACA,wBAAImB,UAAU,QACXnB,EAAawB,KAAI,SAAAH,GAAW,OAAK,kBAAC,EAAD,CAAaA,YAAaA,UCTzDI,EAAiB,WAAO,IAAD,EACTC,mBAAS,IADA,mBACzBC,EADyB,KACpBC,EADoB,OAELF,mBAAS,GAFJ,mBAEzBG,EAFyB,KAElBC,EAFkB,KAIxBC,EAAmBR,qBAAWf,GAA9BuB,eAaR,OACI,oCACE,mDACA,0BAAMC,SAfS,SAAAC,GACbA,EAAEC,iBAEF,IAAMC,EAAiB,CACrBhC,GAAIiC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBX,OACAE,QAASA,GAGXE,EAAeI,KAOf,yBAAKhB,UAAU,gBACb,2BAAOoB,QAAQ,QAAf,eACA,2BAAOxC,KAAK,OAAOgB,MAAOY,EAAMa,SAAU,SAACP,GAAD,OAAOL,EAAQK,EAAEQ,OAAO1B,QAAQ2B,YAAY,6BAGxF,yBAAKvB,UAAU,gBACb,2BAAOoB,QAAQ,UAAf,UACU,6BADV,2CAIA,2BAAOxC,KAAK,SAASgB,MAAOc,EAAQW,SAAU,SAACP,GAAD,OAAOH,EAAUG,EAAEQ,OAAO1B,QAAQ2B,YAAY,qBAG9F,4BAAQvB,UAAU,OAAlB,sBCZGwB,MAff,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,yBAAKxB,UAAU,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCPcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.40e96f22.chunk.js","sourcesContent":["//It's basically how specifies the application state shanges in response to certain actions \n\nexport default (state, action) => {\n    switch(action.type) {\n        //Send down all the transactions except the value to delete\n        case 'DELETE_TRANSACTION':\n            return {\n                ...state,  //spread operator\n                transactions: state.transactions.filter(trasanction => trasanction.id !== action.payload)\n            }\n        case 'ADD_TRANSACTION':\n            return {\n                ...state, //initial state by spread operator ...\n                transactions: [action.payload, ...state.transactions]\n            }\n        default:\n            return state;\n    }\n}","import React, { createContext, useReducer } from 'react';\n\n// Import the Reducer\nimport AppReducer from './AppReducer'\n\n// Create the initial state\nconst initialState = {\n    transactions: [\n        {id: 1, description: \"Income 1\", transactionAmount: 1000},\n        {id: 2, description: \"Expense 1\", transactionAmount: -100},\n        {id: 3, description: \"Income 2\", transactionAmount: 2000},\n        {id: 4, description: \"Expense 2\", transactionAmount: -500}\n    ]\n}\n\n// Create the Global Context\nexport const GlobalContext = createContext(initialState);\n\n// Create a Provider for the Global Context\nexport const GlobalProvider = ({ children }) => {\n\n    const [state] = useReducer(AppReducer, initialState)\n\n    return (\n        <GlobalContext.Provider value={\n            {\n                transactions: state.transactions\n            }\n        }>\n            {children}\n        </GlobalContext.Provider>\n    )\n}","import React from 'react'\n\n//File Name doesn't amter in component, it should match the import name\n//import {Header} from './components/HeaderComp';\nexport const Header = () => {\n    return (\n        <h1>\n           Expense Tracker by Ali Imran (PIAIC50192)\n        </h1>\n    )\n}\n","import React from 'react'\n\nexport const Balance = () => {\n    return (\n        <>\n           <h4>Your Balance </h4> \n           <h1>$0.00</h1> \n        </>\n    )\n}\n","import React from 'react'\n\nexport const AccountSummary = () => {\n    return (\n        <div className=\"inc-exp-container\">\n            <div>\n              <h4>Income</h4>\n      <p className=\"money plus\">$0.00</p>\n            </div>\n            <div>\n              <h4>Expense</h4>\n      <p className=\"money minus\">$0.00</p>\n            </div>\n          </div>\n      )\n    }     \n     ","import React from 'react'\n\nexport const Transaction = ({ transaction }) => {\n    return (\n        <li className=\"plus\">\n            {transaction.description}\n            <span>{transaction.transactionAmount}</span>\n            <button className=\"delete-btn\">X</button>\n        </li>\n    )\n}","import React,{useContext} from 'react'\nimport {GlobalContext} from '../context/GlobalState';\nimport {Transaction} from './Transaction';\n\nexport const TransactionHistory = () => {\n    \n  //const context = useContext(GlobalContext);\n  const {transactions} = useContext(GlobalContext);\n  \n  return (\n       <> \n        <h3>History</h3>\n        <ul className=\"list\">\n          {transactions.map(transaction => (<Transaction transaction={transaction} /> ))}\n        </ul>\n        </>\n    )\n}","\nimport React,{useState,useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\nexport const AddTransaction = () => {\n    const [text,setText] = useState('');\n    const [amount,setAmount] = useState(0);\n\n    const { addTransaction } = useContext(GlobalContext);    \n        const onSubmit = e => {\n            e.preventDefault();\n        \n            const newTransaction = {\n              id: Math.floor(Math.random() * 100000000),\n              text,\n              amount: +amount\n            }\n        \n            addTransaction(newTransaction);\n          }\n\n    return (\n        <>\n          <h3>Add new transaction</h3>\n          <form onSubmit={onSubmit}>\n            <div className=\"form-control\">\n              <label htmlFor=\"text\">Description</label>\n              <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Enter Expense/Income...\" />\n            </div>\n           \n            <div className=\"form-control\">\n              <label htmlFor=\"amount\"\n                >Amount <br />\n                (negative - expense, positive - income)</label\n              >\n              <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} placeholder=\"Enter amount...\" />\n            </div>\n           \n            <button className=\"btn\">Add transaction</button>\n          <\n            /form>\n        </>\n      )\n}\n","import React from 'react';\nimport './App.css';\nimport { GlobalProvider } from './context/GlobalState';\nimport { Header } from './components/HeaderComp';\nimport { Balance } from './components/BalanceComp';\nimport { AccountSummary } from './components/AccountSummary';\nimport { TransactionHistory } from './components/TransactionHistory';\nimport { AddTransaction } from './components/AddTransaction';\n\n\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\" >\n      <Balance />\n      <AccountSummary />\n      <TransactionHistory />\n      <AddTransaction />      \n      </div>\n\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}