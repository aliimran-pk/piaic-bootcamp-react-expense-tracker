{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/myvscode/piaicbootcamp/expense-tracker/src/context/GlobalState1.js\";\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer'; // Initial State\n// any global state will go in this object\n\nconst initialState = {\n  transactions: [{\n    id: 1,\n    description: 'Flower',\n    amount: -20\n  }, {\n    id: 2,\n    description: 'Salary',\n    amount: 300\n  }, {\n    id: 3,\n    description: 'Book',\n    amount: -10\n  }, {\n    id: 4,\n    text: 'Camera',\n    amount: 150\n  }]\n}; // create global context using createContext\n\nexport const GlobalContext = createContext(initialState); // In order to have access for the components to the global context we need to have provider\n// we basicall need to wrap all the components in a provider component\n// provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  //wehrnever we want to call reducer action we need to use dispatch\n  const [state, dispatch] = useReducer(AppReducer, initialState); //Actions\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  } //provider components (it provides the state , actions to the components)\n  //children is everything we wrap in app\n\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions //       deleteTransaction,\n      //      addTransaction\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/ubuntu/myvscode/piaicbootcamp/expense-tracker/src/context/GlobalState1.js"],"names":["React","createContext","useReducer","AppReducer","initialState","transactions","id","description","amount","text","GlobalContext","GlobalProvider","children","state","dispatch","deleteTransaction","type","payload","addTransaction","transaction"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;AAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,CACb;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,WAAW,EAAE,QAAtB;AAAgCC,IAAAA,MAAM,EAAE,CAAC;AAAzC,GADa,EAEZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,WAAW,EAAE,QAAtB;AAAgCC,IAAAA,MAAM,EAAE;AAAxC,GAFY,EAGZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,WAAW,EAAE,MAAtB;AAA8BC,IAAAA,MAAM,EAAE,CAAC;AAAvC,GAHY,EAIZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASG,IAAAA,IAAI,EAAE,QAAf;AAAyBD,IAAAA,MAAM,EAAE;AAAjC,GAJY;AADG,CAArB,C,CASA;;AACA,OAAO,MAAME,aAAa,GAAGT,aAAa,CAACG,YAAD,CAAnC,C,CAEP;AACA;AAEA;;AACA,OAAO,MAAMO,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5C;AACA,QAAM,CAACC,KAAD,EAASC,QAAT,IAAqBZ,UAAU,CAACC,UAAD,EAAaC,YAAb,CAArC,CAF4C,CAI5C;;AACA,WAASW,iBAAT,CAA2BT,EAA3B,EAA+B;AAC3BQ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAE,oBADD;AAELC,MAAAA,OAAO,EAAEX;AAFJ,KAAD,CAAR;AAIH;;AAED,WAASY,cAAT,CAAwBC,WAAxB,EAAqC;AACjCL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAE,iBADD;AAELC,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH,GAjB2C,CAmB5C;AACA;;;AACA,sBAAQ,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AACnCd,MAAAA,YAAY,EAAEQ,KAAK,CAACR,YADe,CAE1C;AACC;;AAHyC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKHO,QALG,CAAR;AAOH,CA5BM","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// Initial State\n\n// any global state will go in this object\nconst initialState = {\n    transactions: [\n     { id: 1, description: 'Flower', amount: -20 },\n      { id: 2, description: 'Salary', amount: 300 },\n      { id: 3, description: 'Book', amount: -10 },\n      { id: 4, text: 'Camera', amount: 150 }\n    ]\n}\n\n// create global context using createContext\nexport const GlobalContext = createContext(initialState);\n\n// In order to have access for the components to the global context we need to have provider\n// we basicall need to wrap all the components in a provider component\n\n// provider component\nexport const GlobalProvider = ({ children }) => {\n    //wehrnever we want to call reducer action we need to use dispatch\n    const [state , dispatch] = useReducer(AppReducer, initialState)\n    \n    //Actions\n    function deleteTransaction(id) {\n        dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id \n        });\n    }\n\n    function addTransaction(transaction) {\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: transaction \n        });\n    }\n\n    //provider components (it provides the state , actions to the components)\n    //children is everything we wrap in app\n    return (<GlobalContext.Provider value={{\n        transactions: state.transactions\n //       deleteTransaction,\n  //      addTransaction\n    }}>\n        {children}\n    </GlobalContext.Provider>)\n}"]},"metadata":{},"sourceType":"module"}