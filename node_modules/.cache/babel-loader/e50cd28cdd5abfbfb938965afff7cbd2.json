{"ast":null,"code":"import _slicedToArray from\"/home/ubuntu/myvscode/piaicbootcamp/expense-tracker/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useReducer}from'react';import AppReducer from'./AppReducer';// Initial State\n// any global state will go in this object\nvar initialState={transactions:[{id:1,text:'Flower',amount:-20},{id:2,text:'Salary',amount:300},{id:3,text:'Book',amount:-10},{id:4,text:'Camera',amount:150}]};// create global context using createContext\nexport var GlobalContext=createContext(initialState);// In order to have access for the components to the global context we need to have provider\n// we basicall need to wrap all the components in a provider component\n// provider component\nexport var GlobalProvider=function GlobalProvider(_ref){var children=_ref.children;//wehrnever we want to call reducer action we need to use dispatch\nvar _useReducer=useReducer(AppReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];//Actions\nfunction deleteTransaction(id){dispatch({type:'DELETE_TRANSACTION',payload:id});}function addTransaction(transaction){dispatch({type:'ADD_TRANSACTION',payload:transaction});}//provider components (it provides the state , actions to the components)\n//children is everything we wrap in app\nreturn/*#__PURE__*/React.createElement(GlobalContext.Provider,{value:{transactions:state.transactions,deleteTransaction:deleteTransaction,addTransaction:addTransaction}},children);};","map":{"version":3,"sources":["/home/ubuntu/myvscode/piaicbootcamp/expense-tracker/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","initialState","transactions","id","text","amount","GlobalContext","GlobalProvider","children","state","dispatch","deleteTransaction","type","payload","addTransaction","transaction"],"mappings":"sIAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,UAA/B,KAAiD,OAAjD,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CAEA;AAEA;AACA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,YAAY,CAAE,CACb,CAAEC,EAAE,CAAE,CAAN,CAASC,IAAI,CAAE,QAAf,CAAyBC,MAAM,CAAE,CAAC,EAAlC,CADa,CAEZ,CAAEF,EAAE,CAAE,CAAN,CAASC,IAAI,CAAE,QAAf,CAAyBC,MAAM,CAAE,GAAjC,CAFY,CAGZ,CAAEF,EAAE,CAAE,CAAN,CAASC,IAAI,CAAE,MAAf,CAAuBC,MAAM,CAAE,CAAC,EAAhC,CAHY,CAIZ,CAAEF,EAAE,CAAE,CAAN,CAASC,IAAI,CAAE,QAAf,CAAyBC,MAAM,CAAE,GAAjC,CAJY,CADG,CAArB,CASA;AACA,MAAO,IAAMC,CAAAA,aAAa,CAAGR,aAAa,CAACG,YAAD,CAAnC,CAEP;AACA;AAEA;AACA,MAAO,IAAMM,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CAC5C;AAD4C,gBAEjBT,UAAU,CAACC,UAAD,CAAaC,YAAb,CAFO,4CAErCQ,KAFqC,iBAE7BC,QAF6B,iBAI5C;AACA,QAASC,CAAAA,iBAAT,CAA2BR,EAA3B,CAA+B,CAC3BO,QAAQ,CAAC,CACLE,IAAI,CAAE,oBADD,CAELC,OAAO,CAAEV,EAFJ,CAAD,CAAR,CAIH,CAED,QAASW,CAAAA,cAAT,CAAwBC,WAAxB,CAAqC,CACjCL,QAAQ,CAAC,CACLE,IAAI,CAAE,iBADD,CAELC,OAAO,CAAEE,WAFJ,CAAD,CAAR,CAIH,CAED;AACA;AACA,mBAAQ,oBAAC,aAAD,CAAe,QAAf,EAAwB,KAAK,CAAE,CACnCb,YAAY,CAAEO,KAAK,CAACP,YADe,CAEnCS,iBAAiB,CAAjBA,iBAFmC,CAGnCG,cAAc,CAAdA,cAHmC,CAA/B,EAKHN,QALG,CAAR,CAOH,CA5BM","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// Initial State\n\n// any global state will go in this object\nconst initialState = {\n    transactions: [\n     { id: 1, text: 'Flower', amount: -20 },\n      { id: 2, text: 'Salary', amount: 300 },\n      { id: 3, text: 'Book', amount: -10 },\n      { id: 4, text: 'Camera', amount: 150 }\n    ]\n}\n\n// create global context using createContext\nexport const GlobalContext = createContext(initialState);\n\n// In order to have access for the components to the global context we need to have provider\n// we basicall need to wrap all the components in a provider component\n\n// provider component\nexport const GlobalProvider = ({ children }) => {\n    //wehrnever we want to call reducer action we need to use dispatch\n    const [state , dispatch] = useReducer(AppReducer, initialState);\n    \n    //Actions\n    function deleteTransaction(id) {\n        dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id \n        });\n    }\n\n    function addTransaction(transaction) {\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: transaction \n        });\n    }\n\n    //provider components (it provides the state , actions to the components)\n    //children is everything we wrap in app\n    return (<GlobalContext.Provider value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction\n    }}>\n        {children}\n    </GlobalContext.Provider>);\n}"]},"metadata":{},"sourceType":"module"}